name: Generate & Publish Calendar Feeds

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'config/**'
      - 'requirements.txt'
      - '.github/workflows/generate-feeds.yml'

permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      FEEDS_WORKDIR: _feeds                 # where the private repo is checked out
      FEEDS_DIR: _feeds/docs/feeds          # output folder inside private repo
      TOKEN_MAP_PATH: _feeds/token_map.json # token map in private repo
      SOURCE_ICS_URL: ${{ secrets.SOURCE_ICS_URL }}
      FEEDS_REPO: ${{ secrets.FEEDS_REPO }}
      FEEDS_REPO_TOKEN: ${{ secrets.FEEDS_REPO_TOKEN }}
      BASE_URL: ${{ secrets.BASE_URL }}

    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt

      - name: Checkout private feeds repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.FEEDS_REPO }}      # e.g. youruser/calendar-feeds
          token: ${{ secrets.FEEDS_REPO_TOKEN }}     # PAT with contents:write to that repo
          path: ${{ env.FEEDS_WORKDIR }}

      - name: Ensure Pages structure exists
        run: |
          mkdir -p "${{ env.FEEDS_DIR }}"
          touch "${{ env.FEEDS_WORKDIR }}/docs/.nojekyll"
          if [ ! -f "${{ env.FEEDS_WORKDIR }}/docs/CNAME" ]; then
            echo "calendar.example.com" > "${{ env.FEEDS_WORKDIR }}/docs/CNAME"
          fi

      - name: Generate feeds (reads events/ from private repo)
        env:
          SOURCE_ICS_URL: ${{ secrets.SOURCE_ICS_URL }}
          FEEDS_DIR: ${{ env.FEEDS_DIR }}
          TOKEN_MAP_PATH: ${{ env.TOKEN_MAP_PATH }}
          BASE_URL: ${{ env.BASE_URL }}
          EVENTS_DIR: ${{ env.FEEDS_WORKDIR }}/events   # <-- key change
        run: python scripts/split_personal_ics.py

      - name: Update README with Course → UUID → URL table
        working-directory: ${{ env.FEEDS_WORKDIR }}
        env:
          BASE_URL: ${{ env.BASE_URL }}
        run: |
          python - <<'PY'
          import os, json, pathlib, re
          root = pathlib.Path(".")
          token_map = json.loads((root/"token_map.json").read_text(encoding="utf-8"))
          base = os.environ.get("BASE_URL","https://calendar.example.com/feeds").rstrip("/")

          rows = []
          for course in sorted(token_map):
              tok = token_map[course]
              url = f"{base}/{course}--{tok}.ics"
              rows.append(f"| `{course}` | `{tok}` | {url} |")
          table = "\n".join(["| Course | UUID | Feed URL |","|---|---|---|",*rows])

          start, end = "<!-- BEGIN FEED TABLE -->", "<!-- END FEED TABLE -->"
          header = root/"README.header.md"
          readme = root/"README.md"

          if header.exists():
              content = header.read_text(encoding="utf-8")
              if start in content and end in content:
                  content = re.sub(rf"{re.escape(start)}.*?{re.escape(end)}",
                                   f"{start}\n{table}\n{end}", content, flags=re.S)
              else:
                  content = content.rstrip()+"\n\n"+table+"\n"
              footer = root/"README.footer.md"
              if footer.exists():
                  content = content.rstrip()+"\n\n"+footer.read_text(encoding="utf-8").rstrip()+"\n"
              readme.write_text(content, encoding="utf-8")
          else:
              if readme.exists():
                  txt = readme.read_text(encoding="utf-8")
                  if start in txt and end in txt:
                      txt = re.sub(rf"{re.escape(start)}.*?{re.escape(end)}",
                                   f"{start}\n{table}\n{end}", txt, flags=re.S)
                      readme.write_text(txt, encoding="utf-8")
                  else:
                      readme.write_text("# Calendar Feeds\n\n"+table+"\n", encoding="utf-8")
              else:
                  readme.write_text("# Calendar Feeds\n\n"+table+"\n", encoding="utf-8")
          PY

      - name: Commit & push to private repo
        working-directory: ${{ env.FEEDS_WORKDIR }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/feeds/*.ics token_map.json docs/CNAME docs/.nojekyll README.md README.header.md README.footer.md 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "Update tokenized feeds & README"
            git push
          else:
            echo "No changes to publish."
          fi
